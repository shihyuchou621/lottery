{"version":3,"sources":["App2.js","reportWebVitals.js","index.js"],"names":["App","QRlist","useState","aniName","setAniName","unclick","setUnclick","list","setList","List10","sort","Math","random","slice","useEffect","fetch","process","then","res","json","className","cx","map","QR","index","onClick","setTimeout","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAoBe,SAASA,IAAM,IALVC,EAKU,EAEEC,mBAAS,IAFX,mBAErBC,EAFqB,KAEZC,EAFY,OAGEF,oBAAS,GAHX,mBAGrBG,EAHqB,KAGZC,EAHY,OAIJJ,mBAAS,IAJL,mBAIrBK,EAJqB,KAIfC,EAJe,KAMtBC,GAXYR,EAWQM,EAVnB,YAAIN,GAAQS,MAAK,kBAAMC,KAAKC,SAAW,MAAIC,MAAM,EAAG,KAoB3DC,qBAAU,WACRC,MAAM,GAAD,OAAIC,WAAJ,eACFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,KAAKT,KACP,IAiBH,OACE,qBAAKY,UAAU,MAAf,SACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAWC,IAAG,SAAD,eACflB,GAAU,IADb,SAGGM,EAAOa,KAAI,SAACC,EAAIC,GAAL,OACV,qBAAKJ,UAAU,KAAf,SAAiCG,GAARC,oBASzC,qBAAKJ,UAAU,gBAAf,SACE,wBACEA,UAAU,SACVK,QAxCU,WAClBnB,GAAW,GACXF,EAAW,SACXsB,YAAW,WACTA,YAAW,kBAAMtB,EAAW,UAAS,KACrCA,EAAW,SACV,MAmCKuB,SAAUtB,EAHZ,SAKE,qBAAKe,UAAU,cAAf,+CCrFZ,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACtC,EAAD,MAEFuC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb2d7ead.chunk.js","sourcesContent":["import './App2.scss';\nimport React, { useState, useEffect } from 'react';\n// import faker from 'faker';\nimport cx from \"classnames\";\n\n// const generateList = num => {\n//   let QRlist = [];\n//   for(var i = 0; i < num; i++) {\n//     QRlist.push({QR: faker.internet.password(), name: faker.name.findName()});\n//   }\n//   return QRlist;\n// }\n\n// const QRlist = generateList(200);\n\nconst generate10 = (QRlist) => {\n  return [...QRlist].sort(() => Math.random() - .5).slice(0, 16); // 不寫[...QRlist]只寫QRlist的話，因為是同一個記憶體位置，可能會回傳原本的東西\n}\n\n\nexport default function App() {\n  // const [drawList, setDrawList] = useState([]);\n  const [aniName, setAniName] = useState(\"\");\n  const [unclick, setUnclick] = useState(false);\n  const [list, setList] = useState([]);\n  \n  const List10 = generate10(list);\n  // const draw = () => {\n  //   let drawNum = null;\n  //   do {\n  //     drawNum = Math.floor(Math.random() * 6);\n  //   } while (drawList.indexOf(QRlist[drawNum]) > -1);\n  //   return drawNum;\n  // }\n// number\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/data.json`)\n      .then((res) => res.json())\n      .then(setList);\n  }, [])\n\n  const handleClick = () => {\n    setUnclick(true);\n    setAniName(\"start\");\n    setTimeout(() => {\n      setTimeout(() => setAniName(\"stop\"), 3000);\n      setAniName(\"run\")\n    }, 3000);\n    \n    // const drawNum = draw();\n    // setDrawList([QRlist[drawNum], ...drawList]);\n\n  }\n\n  // const { name, QR } = QRlist.find(i => i === drawList[0]) || {}; // 如果find找不到(前面是falsly)要給空物件\n\n  return (\n    <div className=\"App\">\n      <div className=\"award\">\n        <div className=\"border-out\">\n          <div className=\"border-middle\">\n            <div className=\"inner-out\">\n              <div className=\"inner-middle\">\n                <div className=\"inner-middle\">\n                  <div className=\"text\">\n                    <div className={cx(\"roller\",{\n                      [aniName]: true\n                    })}>\n                      {List10.map((QR, index) => \n                        <div className=\"QR\" key={index}>{QR}</div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"button-bottom\">  \n          <button \n            className=\"button\"\n            onClick={handleClick}\n            disabled={unclick}\n          >\n            <div className=\"button-text\">\n              開始抽獎\n            </div>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App2';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}